// Declarations, set variables for page elements and defaults
var allSquares = document.querySelectorAll('.square');
var colorDisplay = document.querySelector('#colorDisplay')
var messageDisplay = document.querySelector('#message');
var h1Selector = document.querySelector('h1');
var resetSelector = document.querySelector('#reset');
var defaultBgColor = "#232323";
var diffButtons = document.querySelectorAll('.difficulty');

// Generate defaults when page loads
var numColors = 6;
genAndSetDefaults(numColors);

// Event listeners

// Adds event listener for colored block click
for (var i = 0; i < allSquares.length; i++){
	allSquares[i].addEventListener('click',function(){
		var thisColor = this.style.backgroundColor;
		if (thisColor === pickedColor){
			messageDisplay.textContent = "Correct";
			h1Selector.style.backgroundColor = thisColor;
			changeColors(thisColor);
			resetSelector.textContent = "Play Again?"
		}else{
			messageDisplay.textContent = "Try Again";
			this.style.backgroundColor = defaultBgColor;
		}
	});
}

// Adds event listener for easy mode and hard mode click
for (var i = 0; i < diffButtons.length; i++){
	diffButtons[i].addEventListener('click', function(){
		diffButtons[0].classList.remove('selected');
		diffButtons[1].classList.remove('selected');
		this.classList.add('selected');
		
		if (this.textContent == "EASY"){
			console.log(this.textContent);
			numColors = 3;
		}else{
			numColors = 6;
		}
		genAndSetDefaults(numColors);
	});
}

// Adds event listener for reset button click
resetSelector.addEventListener('click', function(){
	genAndSetDefaults(colors.length);
	for (var i = 0; i < allSquares.length; i++){
		allSquares[i].style.backgroundColor = colors[i];
	}
	stripeBarReset();
});


// Functions

// changes all squares to a specified color
function changeColors(color){
	for (var i = 0; i < colors.length; i++){
		allSquares[i].style.backgroundColor = color;
	}
}

/*
	Resets the game back to defaults
		Generates a new color array with specified number of colors
		Picks a random color as the correct color
		Sets the display of the RGB in the h1 to the picked color
		Resets the stripe bar 
		Either hides or shows the bottom 3 blocks based on the number of colors
		sets color of all shown blocks
*/
function genAndSetDefaults(numColors){
	colors = genRandColorArr(numColors);
	pickedColor = colors[pickColor()];
	colorDisplay.textContent = pickedColor;
	stripeBarReset();
	numColors === 3 ? setBottomButtonHidden(true) : setBottomButtonHidden(false);
	for (var i = 0; i < colors.length; i++){
		setColors(i);
	}
};

// Generates an array of random colors based on the number of colors needed
function genRandColorArr(numColors){
	var arrColors = [];
	var randColor;
	for (var i = 0; i < numColors; i++){
		randColor = genSingleRandColor();
		arrColors.push(randColor);
	}
	return arrColors;
};

// Generates a single random color
function genSingleRandColor(){
	var color;
	var rCh, gCh, bCh;

	rCh = Math.floor(Math.random() * 256);
	gCh = Math.floor(Math.random() * 256);
	bCh = Math.floor(Math.random() * 256);

	color = "rgb(" + rCh + ", " + gCh + ", " + bCh + ")";
	return color;
};

// Picks a random color from the array generated by genRandColrArr()
function pickColor(){
	var pickedIndex = Math.floor(Math.random() * colors.length);
	return pickedIndex;
};

// Hides or shows the bottom 3 blocks based on a boolean passed in
function setBottomButtonHidden(hide){
	if (hide){
		for (var i = 3; i < allSquares.length; i++){
			allSquares[i].classList.add('hidden');
		}
	}else{
		for (var i = 3; i < allSquares.length; i++){
			allSquares[i].classList.remove('hidden');
		}
	}
}

// Sets all blocks to a specified color
function setColors(index){
	allSquares[index].style.backgroundColor = colors[index];
};

// Resets the stripe bar
function stripeBarReset(){
	resetSelector.textContent = "Change Colors";
	messageDisplay.textContent = "";
};

